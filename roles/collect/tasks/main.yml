---
# looping over blocks isn't available, so we'll loop over included tasks instead.
# see: https://github.com/ansible/ansible/issues/13262#issuecomment-335904803
- name: validate dependencies
  import_tasks: validate.yml
  vars:
    files:
      - '{{ collect_insights_client_cmd }}'
      - '{{ collect_ocp_config_file }}'
  tags:
    - validate

- name: Fetch OCP config file from remote host
  fetch:
    src: '{{ collect_ocp_config_file }}'
    dest: '/tmp/'
    fail_on_missing: true
    flat: true

- name: Read in OCP configuration file
  include_vars:
    file: '/tmp/{{ collect_ocp_config_file | basename }}'
    name: ocp_config

- name: validate ocp_config_file dependencies
  import_tasks: validate.yml
  vars:
    files:
      - '{{ ocp_config["ocp_token_file"] }}'

- name: Check for OC command-line
  stat:
    path: '{{ OCP_CLI }}'
  register: check_oc

- name: OCP_CLI does not exits
  fail:
    msg: 'No file was found for OCP_CLI at "{{ OCP_CLI }}".'
  when:
    - not check_oc.stat.exists

- name: Set facts from OCP config
  set_fact:
    ocp_validate_cert: '{{ ocp_config["ocp_validate_cert"] }}'
    ocp_metering_namespace: '{{ ocp_config["ocp_metering_namespace"] }}'

- name: Set facts from OCP config
  set_fact:
    ocp_insecure_login: '--insecure-skip-tls-verify={{ ocp_validate_cert }}'
    api_host: '{{ ocp_config["ocp_api"] }}'
    api_path: 'api/v1/namespaces/{{ ocp_metering_namespace }}'
    current_csv_uuid: '{{ collect_csv_uuid }}'  # bug workaround
    format: "&format={{ collect_format }}"
    namespace: "&namespace={{ ocp_metering_namespace }}"

# conditional - with_proxy
- name: Define facts from OCP config with proxy
  set_fact:
    api_host: '{{ collect_proxy_server_no_port }}:{{ ocp_config["ocp_proxy_port"] }}'
    api_path: '{{ api_path }}/services/https:reporting-operator:http/proxy/api/v1/reports/get'
  tags: with_proxy

# getting a little clever to build lists to append into
- name: initialize fact lists
  set_fact:
    api_params: []
    api_urls: []
    csv_files: []

# this appends the string inside the brackets to the 'api_params' list.
- name: compile URL query params, append to param list
  set_fact:
    api_params: "{{ api_params + ['?name='+item+format+namespace] }}"
  with_items: "{{ collect_reports }}"

# this appends the string inside the brackets to the 'api_urls' list.
- name: assemble compiled URL facts, append to list.
  set_fact:
    api_urls: "{{ api_urls + [api_host+'/'+api_path+'/'+item] }}"
  with_items: "{{ api_params }}"

- name: Create temp dir for downloaded files
  file:
    path: '{{ collect_download_path }}'
    state: directory

- name: Read the OCP token
  command: 'cat {{ ocp_config["ocp_token_file"] }}'
  register: cat_token
  changed_when: false
  no_log: true

- name: Log in to OCP cluster
  command: '{{ OCP_CLI }} login {{ ocp_config["ocp_api"] }} {{ ocp_insecure_login }} --token {{ cat_token.stdout }}'
  when: cat_token.stdout is defined and cat_token != ''
  no_log: true

- name: Run OC Proxy
  command: 'nohup {{ OCP_CLI }} proxy --port={{ ocp_config["ocp_proxy_port"] }} </dev/null >/dev/null 2>&1 &'
  async: 120
  poll: 0
  when: cat_token.stdout is defined and cat_token != ''
  tags: with_proxy

- name: Download OCP report from endpoint
  get_url:
    url: '{{ item }}'
    dest: '{{ collect_download_path }}/{{ current_csv_uuid }}_openshift_usage_report.{{ idx }}.{{ collect_format }}'
    validate_certs: '{{ ocp_config["ocp_validate_cert"] | bool }}'
  with_items: "{{ api_urls }}"
  loop_control:
    index_var: idx
  register: download_result

- name: append filename to fact list
  set_fact:
    csv_files: "{{ csv_files + [item.dest | basename] }}"
  with_items: "{{ download_result.results }}"

- name: debug
  debug:
    msg: "{{ csv_files }}"

- name: Generate archive manifest
  template:
    src: 'templates/manifest.j2'
    dest: '{{ collect_download_path }}/manifest.json'

- name: create list of files to include in tarball
  set_fact:
    tarball_files: "{{ csv_files + [collect_download_path+'/manifest.json'] }}"

- name: Create tarball
  archive:
    format: '{{ collect_archive_format }}'
    dest: '{{ collect_archive_path }}/{{ collect_archive_filename }}'
    path: "{{ tarball_files }}"
    remove: '{{ collect_delete_after }}'
  register: archive_result

- name: Send payload to the Insights Client
  command: '{{ collect_insights_client_cmd }} --no-gpg --payload={{ collect_archive_path }}/{{ collect_archive_filename }} --content-type={{ collect_content_type }}'
  environment:
    BYPASS_GPG: 'True'
    EGG: '/etc/insights-client/rpm.egg'
  become: true
  when: archive_result.state == 'file'

- name: Remove temp files
  file:
    path: '{{ collect_download_path }}'
    state: absent
  when: collect_delete_after
