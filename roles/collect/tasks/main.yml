---
- set_fact:
    csv_file_list: [/tmp/69a5ae95-f66f-4149-874c-67041629a538_openshift_usage_report.0.csv, /tmp/69a5ae95-f66f-4149-874c-67041629a538_openshift_usage_report.1.csv]
    OCP_CLUSTER_ID: "69a5ae95-f66f-4149-874c-67041629a538"
    collect_cluster_download_path: "/tmp"

- name: Split payload in loop
  include_role:
    name: 'split-payload'
  vars:
    file: '{{ item }}'
    OCP_CLUSTER_ID: '{{ OCP_CLUSTER_ID }}'
    download_path: '{{ collect_cluster_download_path }}'
  with_items:
    - '{{ csv_file_list }}'

- name: Ensure needed variables are set
  fail:
    msg: 'You must supply "-e {{ item }}=<{{ item }}>".'
  when: 'item is not defined'
  with_items:
    - OCP_CLUSTER_ID

- name: Define OCP Usage configuration defaults
  set_fact:
    collect_ocp_config_file: '{{ collect_ocp_config_file_cluster_root }}/{{ OCP_CLUSTER_ID }}/{{ collect_ocp_config_filename }}'

- name: Define Cluster-unique config file name
  set_fact:
    collect_ocp_cluster_config_file: '/tmp/{{ OCP_CLUSTER_ID }}_{{ collect_ocp_config_file }}'

# looping over blocks isn't available, so we'll loop over included tasks instead.
# see: https://github.com/ansible/ansible/issues/13262#issuecomment-335904803
- name: validate dependencies
  import_tasks: validate.yml
  vars:
    files:
      - '{{ collect_insights_client_cmd }}'
      - '{{ collect_ocp_config_file }}'
  tags:
    - validate

- name: Fetch OCP config file from remote host
  fetch:
    src: '{{ collect_ocp_config_file }}'
    dest: '{{ collect_ocp_cluster_config_file }}'
    fail_on_missing: true
    flat: true

- name: Read in OCP configuration file
  include_vars:
    file: '{{ collect_ocp_cluster_config_file }}'
    name: ocp_config

- name: validate ocp_config_file dependencies
  import_tasks: validate.yml
  vars:
    files:
      - '{{ ocp_config["ocp_token_file"] }}'

- name: Set facts from OCP config
  set_fact:
    ocp_validate_cert: '{{ ocp_config["ocp_validate_cert"] }}'
    ocp_metering_namespace: '{{ ocp_config["ocp_metering_namespace"] }}'

- name: Set facts from OCP config
  set_fact:
    ocp_insecure_login: '--insecure-skip-tls-verify={{ ocp_validate_cert }}'
    api_host: '{{ ocp_config["ocp_api"] }}'
    api_path: '{{ ocp_config["metering_api"] }}/api/v1/reports/get'
    collect_file_prefix: '{{ collect_manifest_uuid }}'
    collect_manifest_uuid: '{{ collect_manifest_uuid }}'
    format: "&format={{ collect_format }}"
    namespace: "&namespace={{ ocp_metering_namespace }}"
    collect_config_path: '/tmp/{{ OCP_CLUSTER_ID }}_{{ collect_ocp_config_file | basename }}'
    OCP_CLI: ocp_config["ocp_cli"]

# getting a little clever to build lists to append into
- name: initialize fact lists
  set_fact:
    api_params: []
    api_urls: []
    csv_files: []

# this appends the string inside the brackets to the 'api_params' list.
- name: compile URL query params, append to param list
  set_fact:
    api_params: "{{ api_params + ['?name='+item+format+namespace] }}"
  with_items: "{{ collect_reports }}"

# this appends the string inside the brackets to the 'api_urls' list.
- name: assemble compiled URL facts, append to list.
  set_fact:
    api_urls: "{{ api_urls + [api_path+item] }}"
  with_items: "{{ api_params }}"

# Use a cluster specific path
- name: Set download_path
  set_fact:
    collect_cluster_download_path: '{{ collect_download_path }}/{{  OCP_CLUSTER_ID }}'

- name: Remove temp files
  file:
    path: '{{ collect_cluster_download_path }}'
    state: absent
  when: collect_delete_after

- name: Create temp dir for downloaded files
  file:
    path: '{{ collect_cluster_download_path }}'
    state: directory
    mode: 0777

- name: Read the OCP token
  command: 'cat {{ ocp_config["ocp_token_file"] }}'
  register: cat_token
  changed_when: false
  no_log: true

- name: Download OCP report from endpoint
  get_url:
    url: '{{ item }}'
    headers: "Authorization:Bearer {{ cat_token.stdout }}"
    dest: '{{ collect_cluster_download_path }}/{{ collect_file_prefix }}_openshift_usage_report.{{ idx }}.{{ collect_format }}'
    validate_certs: '{{ ocp_config["ocp_validate_cert"] | bool }}'
    timeout: '{{ collect_ocp_report_timeout }}'
  with_items: "{{ api_urls }}"
  loop_control:
    index_var: idx
  register: download_result

- name: append filename to fact list
  set_fact:
    csv_files: "{{ csv_files + [item.dest | basename] }}"
  with_items: "{{ download_result.results }}"

- name: Check that required files exist
  stat:
    path: '{{ collect_cluster_download_path + "/" + item }}'
  register: csv_stat_result
  with_items:
    - '{{ csv_files }}'

- name: Check for empty download results
  fail:
    msg: 'Downloaded file {{ item }} has no content or could not be found: {{ item.stat }}.'
  when: not item.stat.exists or (item.stat.exists and item.stat.size <= 0)
  with_items:
    - '{{ csv_stat_result.results }}'

- name: Split payload in loop
  include_role:
    name: 'split-payload'
  vars:
    file: '{{ item }}'
    ocp_config: '{{ ocp_config }}'
    download_path: '{{ collect_cluster_download_path }}'
  with_items:
    - '{{ csv_stat_result.results }}'